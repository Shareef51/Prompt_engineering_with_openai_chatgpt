# -*- coding: utf-8 -*-
"""Prompt_Engineering_with_OpenAI_ChatGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttJQyTsqPaokZrdH6X0xgRh6U1wYXWuK

# Exploring Prompt Engineering Patterns

- Task 01: Persona Pattern
- Task 02: Flipped Interaction Pattern
- Task 03: N-Shot Prompting Pattern
- Task 04: Directional Stimulus Pattern
- Task 05: Template Pattern
- Task 06: Meta Language Pattern
- Task 07: Chain of Thought Pattern
- Task 08: Self-Consistency Pattern
- Task 09: Least to Most Pattern

## Install OpenAI and LangChain dependencies
"""

!pip install langchain==0.3.10
!pip install langchain-openai==0.2.12
!pip install langchain-community==0.3.11

"""## Load OpenAI API Credentials

Here we load it from get password function

## Enter API Tokens
"""

from getpass import getpass

OPENAI_KEY = getpass('Enter Open AI API Key: ')

"""## Configure Key in Environment"""

import os

os.environ['OPENAI_API_KEY'] = OPENAI_KEY

"""## Load Necessary Dependencies and ChatGPT LLM"""

from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI

chatgpt = ChatOpenAI(model_name='gpt-4o-mini', temperature=0)

"""## Task 01: Persona Pattern

The **Persona Pattern** in prompt engineering is a technique where you instruct the AI to **adopt a specific role, character, or identity** to shape its responses in a more targeted, creative, or authoritative way.

## üß† What Is the Persona Pattern?

You tell the AI to ‚Äúact as‚Äù or ‚Äúpretend to be‚Äù a particular persona ‚Äî such as a doctor, historian, chef, or even a fictional character ‚Äî and then give it a task. This helps the AI generate responses that reflect the tone, expertise, and perspective of that persona.


### ‚úÖ Benefits

- üé≠ **Voice and Style Control**: Responses reflect the tone, vocabulary, and mindset of the chosen persona.
- üéØ **Targeted Expertise**: Useful for simulating specialists in fields like medicine, law, or education.
- üé® **Creative Exploration**: Great for storytelling, roleplay, or historical reimaginings.
- üß† **Enhanced Engagement**: Makes interactions more immersive and personalized.



### ‚ö†Ô∏è Limitations

- **May struggle with complex or ambiguous personas**  
  If the persona isn‚Äôt clearly defined, the AI may default to generic behavior.

- **Performance can vary depending on how well the prompt is written**  
  Vague or inconsistent persona instructions can lead to off-target responses.

- **Risk of stereotyping or oversimplification**  
  The AI might rely on clich√©s or inaccurate portrayals of certain roles or identities.
"""

from IPython.display import display, Markdown

prompt = """Act as a marketing manager,
            your task is to help a marketing team create an eye-catching advert
            for a new smartphone product based on the following technical fact sheet.

            Create an advert where you highlight the most important features
            and briefly mention how they could be used with an example.
            Try to captivate the audience with these examples.
            Focus especially on the screen size, hardware, camera, battery life

            PRODUCT NAME: Apple iPhone 15

            PRODUCT SPECS:

            NETWORK	Technology
            GSM / CDMA / HSPA / EVDO / LTE / 5G
            LAUNCH	Announced	2023, September 12
            Status	Available. Released 2023, September 22
            BODY	Dimensions	147.6 x 71.6 x 7.8 mm (5.81 x 2.82 x 0.31 in)
            Weight	171 g (6.03 oz)
            Build	Glass front (Corning-made glass), glass back (Corning-made glass), aluminum frame
            SIM	Nano-SIM and eSIM - International
            Dual eSIM with multiple numbers - USA
            Dual SIM (Nano-SIM, dual stand-by) - China
                IP68 dust/water resistant (up to 6m for 30 min)
            Apple Pay (Visa, MasterCard, AMEX certified)
            DISPLAY	Type	Super Retina XDR OLED, HDR10, Dolby Vision, 1000 nits (HBM), 2000 nits (peak)
            Size	6.1 inches, 91.3 cm2 (~86.4% screen-to-body ratio)
            Resolution	1179 x 2556 pixels, 19.5:9 ratio (~461 ppi density)
            Protection	Ceramic Shield glass
            PLATFORM	OS	iOS 17, upgradable to iOS 17.1
            Chipset	Apple A16 Bionic (4 nm)
            CPU	Hexa-core (2x3.46 GHz Everest + 4x2.02 GHz Sawtooth)
            GPU	Apple GPU (5-core graphics)
            MEMORY	Card slot	No
            Internal	128GB 6GB RAM, 256GB 6GB RAM, 512GB 6GB RAM
                NVMe
            MAIN CAMERA	Dual	48 MP, f/1.6, 26mm (wide), 1/1.56", 1.0¬µm, dual pixel PDAF, sensor-shift OIS
            12 MP, f/2.4, 13mm, 120Àö (ultrawide)
            Features	Dual-LED dual-tone flash, HDR (photo/panorama)
            Video	4K@24/25/30/60fps, 1080p@25/30/60/120/240fps, HDR, Dolby Vision HDR (up to 60fps), Cinematic mode (4K@30fps), stereo sound rec.
            SELFIE CAMERA	Single	12 MP, f/1.9, 23mm (wide), 1/3.6", PDAF
            SL 3D, (depth/biometrics sensor)
            Features	HDR, Cinematic mode (4K@30fps)
            Video	4K@24/25/30/60fps, 1080p@25/30/60/120fps, gyro-EIS
            SOUND	Loudspeaker	Yes, with stereo speakers
            3.5mm jack	No
            COMMS	WLAN	Wi-Fi 802.11 a/b/g/n/ac/6, dual-band, hotspot
            Bluetooth	5.3, A2DP, LE
            Positioning	GPS, GLONASS, GALILEO, BDS, QZSS
            NFC	Yes
            Radio	No
            USB	USB Type-C 2.0, DisplayPort
            FEATURES	Sensors	Face ID, accelerometer, gyro, proximity, compass, barometer
                Ultra Wideband 2 (UWB) support
            Emergency SOS via satellite (SMS sending/receiving)
            BATTERY	Type	Li-Ion 3349 mAh, non-removable
            Charging	Wired, PD2.0, 50% in 30 min (advertised)
            15W wireless (MagSafe)
            7.5W wireless (Qi)
            4.5W reverse wired
            MISC	Colors	Black, Blue, Green, Yellow, Pink
            Models	A3090, A2846, A3089, A3092, iPhone15,4
            SAR	1.12 W/kg (head)     1.14 W/kg (body)
            SAR EU	0.98 W/kg (head)     0.98 W/kg (body)
            Price	‚Çπ‚Äâ79,900 / ¬£‚Äâ799.00 / ‚Ç¨‚Äâ949.00
            TESTS	Performance	AnTuTu: 1354651 (v10)
            GeekBench: 6526 (v6)
            GFXBench: 60fps (ES 3.1 onscreen)
            Display	Contrast ratio: Infinite (nominal)
            Camera	Photo / Video
            Loudspeaker	-26.2 LUFS (Good)
            Battery life
            Endurance rating 98h
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""## Task 02: Flipped Interaction Pattern

The **Flipped Interaction Pattern** is a prompt engineering technique where the usual roles in a conversation with an AI are reversed: **instead of you asking the AI questions**, the **AI asks you questions** to gather information and guide the process toward a specific goal.


### üîÑ What Makes It ‚ÄúFlipped‚Äù?

- **Traditional pattern**: You ask, the AI answers.
- **Flipped pattern**: The AI asks, you answer ‚Äî and it uses your responses to build toward a final output.


### üß† Why Use It?

This pattern is especially useful when:
- You don‚Äôt know exactly what to ask.
- You want to be guided through a process (e.g., building a fitness plan, writing a story, solving a problem).
- You want the AI to simulate a coach, interviewer, or consultant.

### ‚úÖ Benefits

- üéØ **Goal-oriented**: Keeps the conversation focused on achieving a specific outcome.
- üß≠ **Guided discovery**: Helps users uncover needs or preferences they hadn‚Äôt considered.
- üß† **Cognitive offloading**: You don‚Äôt have to think of the right questions ‚Äî the AI does that for you.

‚ö†Ô∏è Limitations

May struggle with complex or ambiguous tasks If the goal isn‚Äôt clearly defined, the AI might ask irrelevant or repetitive questions.

Performance can vary depending on how well the prompt is written A vague or poorly structured prompt can lead to inefficient or confusing interactions.
"""

from langchain_core.prompts import ChatPromptTemplate
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory

prompt = ChatPromptTemplate.from_messages(
    [
        ("placeholder", "{chat_history}"),
        ("human", "{input}"),
    ]
)

llm_chain = (prompt
                |
             chatgpt)

history = ChatMessageHistory()

conv_chain = RunnableWithMessageHistory(
    llm_chain,
    lambda session_id: history,
    input_messages_key="input",
    history_messages_key="chat_history",
)

prompt_input = """I would like you to ask me questions to build a detailed project plan
            for a data science project.
            Ask me questions until you have enough information to build this project plan.
            You can ask questions about the problem, resources, data, and any other relevant questions.
            Ask me one question at a time. Let‚Äôs start with the first question.
         """
response = conv_chain.invoke({"input": prompt_input},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = "We want to build a predictive model to detect fraudulent transactions in our bank"
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """We are dealing with credit card and online banking transactions both.
                  We have labeled data for our historical data flagging transactions as normal or fraudulent
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """We have roughly 500000 transactions for the last 3 years of data.
                  These are the main features in our dataset:
                    transaction amount
                    payment method
                    payment type
                    payment time
                    merchant ID
                    total transactions in last month
                    credit score
                    average transaction amount in last year
                    transaction status - fraudulent or not fraudulent
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """We want to start with a balance between precision and recall
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """Open source is our focus and also the python ecosystem.
                  Feel free to suggest relevant libraries and tools in the plan.
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """We have one month to build a proof of concept and two data scientists.
                  Please suggest relevant milestones and timelines in the plan as needed
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """Database Team Developer: John for database access and help as needed
                  Transaction Team Manager: Jim for presentations and approvals after PoC is built
                  Analytics Team Manager: Jacob For intermediate progress, technical discussions and demos as PoC is being built
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """All of the above as you suggested
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

human_answer = """Cross validation and a holdout dataset, for now we just want to focus
                  on our proof of concept
               """
response = conv_chain.invoke({"input": human_answer},
                             {"configurable": {"session_id": "unused"}})
display(Markdown(response.content))

"""## Task 03: N-shot Prompting Pattern

### Zero-Shot Prompting

Zero-shot prompting is a technique where a language model is asked to perform a task without being given any examples of how to do it. Instead, the model relies entirely on its pre-trained knowledge and the clarity of the instructions in the prompt.

üß† How It Works

You give the model a direct instruction.

No demonstrations or examples are included.

The model uses its general understanding from training to respond.

‚úÖ Advantages

Fast and efficient for simple tasks.

No need to craft examples.

Useful when examples are unavailable or impractical.

‚ö†Ô∏è Limitations

May struggle with complex or ambiguous tasks.

Performance can vary depending on how well the prompt is written.
"""

from IPython.display import display, Markdown

prompt = """Q: What is the capital of France?
            A:
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

prompt = """News Categories : sports, business, entertainment, technology
            Article:  Olympics postponed due to unforeseen circumstances, world athletes in shock
            Category:
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""###  1-Shot Prompting

**One-shot prompting** is a technique in prompt engineering where a language model is given **just one example** of a task before being asked to perform similar tasks. It sits between zero-shot (no examples) and few-shot (multiple examples) prompting.

### üß† How It Works

- You provide a **single input-output pair** to demonstrate the desired behavior.
- The model uses this example as a **template** to generalize and respond to new inputs.


### ‚úÖ Benefits

- Helps the model understand **task structure** with minimal data.
- Useful when **training data is scarce**.
- Often more accurate than zero-shot for **complex tasks**.

### ‚ö†Ô∏è Challenges

- The **quality of the single example** is crucial.
- May not generalize well if the task is highly variable.
"""

from IPython.display import display, Markdown

prompt = """Q: What is the capital of France?
            A: Paris.

            Q: What is the capital of Switzerland?
            A:
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

from IPython.display import display, Markdown

prompt = """Possible News Categories : Sports, Business, Entertainment, Technology

            Article:  Olympics postponed due to unforeseen circumstances, world athletes in shock
            Category: Sports

            Article:  Tech giant NeoTech announces its latest smartphone, the NeoTech Ultra
            Category:
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""###  Few-Shot Prompting

**Few-shot prompting** is a technique in prompt engineering where a language model is given a **small number of examples**‚Äîtypically 2 to 5‚Äîto guide its response to a new task. These examples help the model understand the desired format, tone, or logic, enabling it to generalize and perform better than with zero-shot or one-shot prompting.

### üß† How It Works

- Include several **input-output pairs** in the prompt.
- The model uses these examples to **learn in context** and apply the pattern to a new input.
- It‚Äôs especially useful for **complex tasks** or when precision matters.

### ‚úÖ Benefits

- Improves accuracy on nuanced tasks.
- Reduces need for large labeled datasets.
- Enables **in-context learning** without retraining the model.

### ‚ö†Ô∏è Limitations

- Requires careful selection of examples.
- Prompt length is limited by token constraints.
- Performance depends on **example quality and relevance**.
"""

from IPython.display import display, Markdown

prompt = """Possible News Categories : Sports, Business, Entertainment, Technology

            INPUT: Wimbledon 2023 Women‚Äôs Final. Marketa Vondrousova beats Ons Jabeur to win her maiden Grand Slam title
            OUTPUT: Sports

            INPUT: Kicking things off with the Galaxy Tab S9 FE Plus. It's going to be powered by the Exynos 1380 with 8GB of RAM, and pack a 12.4-inch display. The slate will measure 285.4 x 185.4 x 6.54 mm and feature dual speakers, a side-mounted fingerprint sensor. It will come in Grey, Light Green, Light Pink, and Silver color options.
            OUTPUT: Technology

            INPUT: The share of the cigarette business to ITC‚Äôs business in revenue terms has dropped from 47 per cent in FY13 to 37 per cent in FY23 on a larger revenue base. According to the company‚Äôs most recent annual report, the leadership position has been sustained ‚Äúthrough its unwavering focus on nurturing a future-ready portfolio of world-class products anchored on its integrated seed to smoke value chain, superior consumer insights, robust innovation pipeline and world-class product development capabilities.‚Äù
            OUTPUT: Business

            INPUT: Arsenal finally completed the signing of Rice as they announced the player's arrival on Saturday. Right after completing his move, Rice revealed that he is a great admirer of Arteta and that the Spaniard's presence in the Arsenal dressing room is one of the main reasons why he decided to join the North London club.
            OUTPUT:
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""## Task 04: Directional Stimulus Pattern

**Directional Stimulus Prompting (DSP)** is an advanced prompt engineering technique designed to guide large language models (LLMs) toward producing more accurate, context-sensitive, and task-specific outputs. Unlike traditional prompting methods (like zero-shot or few-shot), DSP introduces a **structured stimulus**‚Äîessentially a hint or directive‚Äîwithin the prompt to steer the model‚Äôs behavior more precisely.

### üéØ Key Concepts

- **Directional Stimulus**: A targeted cue embedded in the prompt that nudges the model toward a desired output style or focus.
- **Policy Model**: A smaller model may be used to generate these stimuli dynamically based on the task or input.
- **Control Mechanism**: DSP acts like a GPS for the model‚Äôs generative process, helping it stay aligned with specific goals.


### ‚úÖ Benefits

- Greater **control over output quality**
- More **contextually relevant** responses
- Useful for tasks like summarization, dialogue generation, and structured reasoning

### ‚ö†Ô∏è Considerations

- Requires thoughtful design of stimuli
- May involve additional modeling (e.g., a policy model)
- Best suited for **complex or high-stakes tasks**
"""

ARTICLE = """Generative artificial intelligence (also generative AI or GenAI[1]) is artificial intelligence capable of generating text, images, or other media, using generative models.[2][3][4] Generative AI models learn the patterns and structure of their input training data and then generate new data that has similar characteristics.[5][6]

In the early 2020s, advances in transformer-based deep neural networks enabled a number of generative AI systems notable for accepting natural language prompts as input. These include large language model chatbots such as ChatGPT, Bing Chat, Bard, and LLaMA, and text-to-image artificial intelligence art systems such as Stable Diffusion, Midjourney, and DALL-E.[7][8][9]

Generative AI has uses across a wide range of industries, including art, writing, script writing, software development, product design, healthcare, finance, gaming, marketing, and fashion.[10][11][12] Investment in generative AI surged during the early 2020s, with large companies such as Microsoft, Google, and Baidu as well as numerous smaller firms developing generative AI models.[2][13][14] However, there are also concerns about the potential misuse of generative AI, including cybercrime or creating fake news or deepfakes which can be used to deceive or manipulate people.[15]

History
Main article: History of artificial intelligence
The academic discipline of artificial intelligence was founded at a research workshop at Dartmouth College in 1956, and has experienced several waves of advancement and optimism in the decades since.[16] Since its founding, researchers in the field have raised philosophical and ethical arguments about the nature of the human mind and the consequences of creating artificial beings with human-like intelligence; these issues have previously been explored by myth, fiction and philosophy since antiquity.[17] These concepts of automated art date back at least to the automata of ancient Greek civilization, where inventors such as Daedalus and Hero of Alexandria were described as having designed machines capable of writing text, generating sounds, and playing music.[18][19] The tradition of creative automatons has flourished throughout history, such as Maillardet's automaton, created in the early 1800s.[20]

Since the founding of AI in the 1950s, artists and researchers have used artificial intelligence to create artistic works. By the early 1970s, Harold Cohen was creating and exhibiting generative AI works created by AARON, the computer program Cohen created to generate paintings.[21]

Markov chains have long been used to model natural languages since their development by Russian mathematician Andrey Markov in the early 20th century. Markov published his first paper on the topic in 1906,[22][23][24] and analyzed the pattern of vowels and consonants in the novel Eugeny Onegin using Markov chains. Once a Markov chain is learned on a text corpus, it can then be used as a probabilistic text generator.[25][26]

The field of machine learning often uses statistical models, including generative models, to model and predict data. Beginning in the late 2000s, the emergence of deep learning drove progress and research in image classification, speech recognition, natural language processing and other tasks. Neural networks in this era were typically trained as discriminative models, due to the difficulty of generative modeling.[27]

In 2014, advancements such as the variational autoencoder and generative adversarial network produced the first practical deep neural networks capable of learning generative, rather than discriminative, models of complex data such as images. These deep generative models were the first able to output not only class labels for images, but to output entire images.

In 2017, the Transformer network enabled advancements in generative models, leading to the first generative pre-trained transformer (GPT), known as GPT-1, in 2018.[28] This was followed in 2019 by GPT-2 which demonstrated the ability to generalize unsupervised to many different tasks as a Foundation model.[29]

In 2021, the release of DALL-E, a transformer-based pixel generative model, followed by Midjourney and Stable Diffusion marked the emergence of practical high-quality artificial intelligence art from natural language prompts.

In March 2023, GPT-4 was released. A team from Microsoft Research argued that "it could reasonably be viewed as an early (yet still incomplete) version of an artificial general intelligence (AGI) system".[30]. Other scholars have disputed that GPT-4 reaches this threshold, calling generative AI "still far from reaching the benchmark of ‚Äògeneral human intelligence‚Äô" as of 2023.[31]

Modalities
A generative AI system is constructed by applying unsupervised or self-supervised machine learning to a data set. The capabilities of a generative AI system depend on the modality or type of the data set used.

Generative AI can be either unimodal or multimodal; unimodal systems take only one type of input, whereas multimodal systems can take more than one type of input.[32] For example, one version of OpenAI's GPT-4 accepts both text and image inputs.[33]

Text

A user conversing with a Character.ai simulation of Ludwig Wittgenstein
Generative AI systems trained on words or word tokens include GPT-3, LaMDA, LLaMA, BLOOM, GPT-4, and others (see List of large language models). They are capable of natural language processing, machine translation, and natural language generation and can be used as foundation models for other tasks.[34] Data sets include BookCorpus, Wikipedia, and others (see List of text corpora).

Code
In addition to natural language text, large language models can be trained on programming language text, allowing them to generate source code for new computer programs.[35] Examples include OpenAI Codex.

Images
See also: Artificial intelligence art

Stable Diffusion, prompt a photograph of an astronaut riding a horse
Producing high-quality visual art is a prominent application of generative AI.[36] Many such artistic works have received public awards and recognition.

Generative AI systems trained on sets of images with text captions include Imagen, DALL-E, Midjourney, Adobe Firefly, Stable Diffusion and others (see Artificial intelligence art, Generative art, and Synthetic media). They are commonly used for text-to-image generation and neural style transfer.[37] Datasets include LAION-5B and others (See Datasets in computer vision).

Music
Duration: 16 seconds.0:16
AI-generated music from the Riffusion Inference Server, prompted with bossa nova with electric guitar
Generative AI systems such as MusicLM[38] and MusicGen[39] can be trained on the audio waveforms of recorded music along with text annotations, in order to generate new musical samples based on text descriptions such as a calming violin melody backed by a distorted guitar riff.

Video
Runway Gen2, prompt A golden retriever in a suit sitting at a podium giving a speech to the white house press corps
Generative AI trained on annotated video can generate temporally-coherent video clips. Examples include Gen1 and Gen2 by RunwayML[40] and Make-A-Video by Meta Platforms.[41]

Molecules
Generative AI systems can be trained on sequences of amino acids or molecular representations such as SMILES representing DNA or proteins. These systems, such as AlphaFold, are used for protein structure prediction and drug discovery.[42] Datasets include various biological datasets.

Robotics
Generative AI can also be trained on the motions of a robotic system to generate new trajectories for motion planning or navigation. For example, UniPi from Google Research uses prompts like "pick up blue bowl" or "wipe plate with yellow sponge" to control movements of a robot arm.[43] Multimodal "vision-language-action" models such as Google's RT-2 can perform rudimentary reasoning in response to user prompts and visual input, such as picking up a toy dinosaur when given the prompt pick up the extinct animal at a table filled with toy animals and other objects.[44]

Planning
The terms generative AI planning or generative planning were used in the 1980s and 1990s to refer to AI planning systems, especially computer-aided process planning, used to generate sequences of actions to reach a specified goal.[45][46]

Generative AI planning systems used symbolic AI methods such as state space search and constraint satisfaction and were a "relatively mature" technology by the early 1990s. They were used to generate crisis action plans for military use,[47] process plans for manufacturing[45] and decision plans such as in prototype autonomous spacecraft.[48]

Software and hardware
Generative AI models are used to power chatbot products such as ChatGPT, programming tools such as GitHub Copilot,[49] text-to-image products such as Midjourney, and text-to-video products such as Runway Gen-2.[50] Generative AI features have been integrated into a variety of existing commercially-available products such as Microsoft Office,[51] Google Photos,[52] and Adobe Photoshop.[53] Many generative AI models are also available as open-source software, including Stable Diffusion and the LLaMA[54] language model.

Smaller generative AI models with up to a few billion parameters can run on smartphones, embedded devices, and personal computers. For example, LLaMA-7B (a version with 7 billion parameters) can run on a Raspberry Pi 4[55] and one version of Stable Diffusion can run on an iPhone 11.[56]

Larger models with tens of billions of parameters can run on laptop or desktop computers. To achieve an acceptable speed, models of this size may require accelerators such as the GPU chips produced by Nvidia and AMD or the Neural Engine included in Apple silicon products. For example, the 65 billion parameter version of LLaMA can be configured to run on a desktop PC.[57]

Language models with hundreds of billions of parameters, such as GPT-4 or PaLM, typically run on datacenter computers equipped with arrays of GPUs (such as Nvidia's H100) or AI accelerator chips (such as Google's TPU). These very large models are typically accessed as cloud services over the Internet.

In 2022, the United States New Export Controls on Advanced Computing and Semiconductors to China imposed restrictions on exports to China of GPU and AI accelerator chips used for generative AI.[58] Chips such as the Nvidia A800[59] and the Biren Technology BR104[60] were developed to meet the requirements of the sanctions.

There are free softwares on the market capable of recognising text generated by generative artificial intelligence (such as GPTZero), as well as images, audio or video coming from it.[61]

Concerns
See also: Ethics of artificial intelligence and Existential risk from artificial general intelligence
The development of generative AI has raised concerns from governments, businesses, and individuals, resulting in protests, legal actions, calls to pause AI experiments, and actions by multiple governments. In a July 2023 briefing of the United Nations Security Council, Secretary-General Ant√≥nio Guterres stated "Generative AI has enormous potential for good and evil at scale", that AI may "turbocharge global development" and contribute between $10 and $15 trillion to the global economy by 2030, but that its malicious use "could cause horrific levels of death and destruction, widespread trauma, and deep psychological damage on an unimaginable scale".[62]

Job losses

A picketer at the 2023 Writers Guild of America strike. While not a top priority, one of the WGA's 2023 requests was "regulations around the use of (generative) AI".[63]
Main articles: Workplace impact of artificial intelligence and Technological unemployment
From the early days of the development of AI, there have been arguments put forward by ELIZA creator Joseph Weizenbaum and others about whether tasks that can be done by computers actually should be done by them, given the difference between computers and humans, and between quantitative calculations and qualitative, value-based judgements.[64] In April 2023, it was reported that image generation AI has resulted in 70% of the jobs for video game illustrators in China being lost.[65][66] In July 2023, developments in generative AI contributed to the 2023 Hollywood labor disputes. Fran Drescher, president of the Screen Actors Guild, declared that "artificial intelligence poses an existential threat to creative professions" during the 2023 SAG-AFTRA strike.[67]

Deepfakes
Main article: Deepfake
Deepfakes (a portmanteau of "deep learning" and "fake"[68]) are AI-generated media that take a person in an existing image or video and replace them with someone else's likeness using artificial neural networks.[69] Deepfakes have garnered widespread attention and concerns for their uses in deepfake celebrity pornographic videos, revenge porn, fake news, hoaxes, and financial fraud.[70][71][72][73] This has elicited responses from both industry and government to detect and limit their use.[74][75]

Cybercrime
Generative AI's ability to create realistic fake content has been exploited in numerous types of cybercrime, including phishing scams.[76] Deepfake video and audio have been used to create disinformation and fraud. Former Google fraud czar Shuman Ghosemajumder has predicted that while deepfake videos initially created a stir in the media, they would soon become commonplace, and as a result, more dangerous.[77] Cybercriminals have created large language models focused on fraud, including WormGPT and FraudGPT.[78]

Misuse in journalism
In January 2023, Futurism.com broke the story that CNET had been using an undisclosed internal AI tool to write at least 77 of its stories; after the news broke, CNET posted corrections to 41 of the stories.[79]

In April 2023, German tabloid Die Aktuelle published a fake AI-generated interview with former racing driver Michael Schumacher, who had not made any public appearances since 2013 after sustaining a brain injury in a skiing accident. The story included two possible disclosures: the cover included the line "deceptively real", and the interview included an acknowledgement at the end that it was AI-generated. The editor-in-chief was fired shortly thereafter amid the controversy.[80]

Regulation
Main article: Regulation of artificial intelligence
In the European Union, the proposed Artificial Intelligence Act includes requirements to disclose copyrighted material used to train generative AI systems, and to label any AI-generated output as such.[81]

In the United States, a group of companies including OpenAI, Alphabet, and Meta signed a voluntary agreement with the White House in July 2023 to watermark AI-generated content.[82]

In China, the Interim Measures for the Management of Generative AI Services introduced by the Cyberspace Administration of China regulates any public-facing generative AI. It includes requirements to watermark generated images or videos, regulations on training data and label quality, restrictions on personal data collection, and a guideline that generative AI must "adhere to socialist core values".[83][84]
"""

from IPython.display import display, Markdown

prompt_inp = """Summarize the following article in 5 lines based on the following hints.
                Hint: Generative AI history, data modalities, tools, applications, concerns

                Article:
                {article}
             """

prompt = ChatPromptTemplate.from_template(prompt_inp)

llm_chain = (prompt
                |
             chatgpt)

response = llm_chain.invoke({'article': ARTICLE})
display(Markdown(response.content))

"""## Task 05: Template Pattern

The **Template Pattern** in prompt engineering refers to using a **structured, reusable format** for prompts that can be easily adapted across different tasks or domains. It‚Äôs like having a fill-in-the-blank framework that ensures consistency, clarity, and effectiveness when interacting with AI models.

### üß± What Is a Prompt Template?

A prompt template is a **predefined scaffold** that includes:
- **Task definition**: What you want the model to do
- **Input placeholder**: Where you insert your specific data
- **Constraints or style cues**: Tone, format, length, etc.

This pattern helps streamline prompt creation and improves the reliability of outputs.

### ‚úÖ Benefits

- Promotes **clarity and consistency**
- Saves time when prompting repeatedly
- Makes it easier to **scale** across multiple use cases
Absolutely! While the **Template Pattern** is powerful, it‚Äôs not without its limitations. Here‚Äôs a breakdown to help you use it wisely:

---

### ‚ö†Ô∏è Limitations of the Template Pattern

- Templates can become **too rigid**, limiting creativity or nuanced responses.

- Users might miss out on the model‚Äôs ability to **respond dynamically** to unique inputs.

- Reusing the same format repeatedly can lead to **predictable and stale results**.

- A template designed for one domain (e.g., legal writing) may not work well in another (e.g., creative storytelling).
"""

from IPython.display import display, Markdown

prompt = """Create a random list of learning activities I can do today for learning Generative AI.
            I am going to provide a template for your output .
            Try to fit the output into the templates that I list.
            Please preserve the formatting and overall template that I provide.

            This is the template: ACTIVITY, TOPIC, RESOURCE, DIFFICULTY SCALE 1-5, NOTES
            Return the response as JSON
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""## Task 06: Meta Language Pattern

The **Meta Language Pattern** in prompt engineering is a technique where you create a **custom symbolic or shorthand language** within your prompt to communicate more efficiently and precisely with a language model. It‚Äôs like inventing your own mini-language or notation system that the model learns to interpret based on context you define.

---

### üß† What Is It?

- You define **custom terms, symbols, or structures** that represent complex ideas or instructions.
- These terms are explained once, then reused throughout the prompt or conversation.
- It helps reduce repetition and ambiguity, especially in **multi-step tasks** or **creative workflows**.


### ‚úÖ Benefits

- üß© **Clarity**: Reduces ambiguity by defining terms explicitly.
- üß† **Efficiency**: Saves space and avoids repeating long instructions.
- üõ†Ô∏è **Control**: Helps guide the model‚Äôs behavior in structured tasks.

---

### ‚ö†Ô∏è Limitations

- üöß **Setup Overhead**: Requires careful definition upfront.
- ‚ùì **Misinterpretation Risk**: If the shorthand isn‚Äôt clear, the model may misapply it.
- üìè **Scalability**: Complex meta languages can become hard to manage or debug.
"""

from IPython.display import display, Markdown

prompt = """Act as a project manager for a data science team in a tech company.
            We will be using a special notation now to indicate the flow of a data science project.
            I will provide you that notation.
            Your task is to give a detailed plan for each step in the project as identified by the notation.

            Let's take an example:

            Project Name: Churn Analytics for a Telecom Company
    	    Dataset: Database with over 20000 customers data, has features including contract, payment method,
                     paperless billing, monthly charges, total charges, gender, age range
                     and of course churn (yes \ no)
            Project Flow: Business_Understanding,3 -> Data_Understanding,5 -> Data_Cleaning,7
                          -> Data_Exploration,5 -> Data_Visualization,5 -> Machine_Learning,7
                          -> Results_Evaluation,2 -> Business_Presentation,2

            This indicates the project name, details about the dataset
            and the project flow is in the form Step1,Days1 -> Step2,Days2
            and so on where Step1 indicates what step in the data science project is going to be performed
            and Days1 indicates the days allocated for that step.

            You should list down a detailed set of tasks which can be done in each of these steps
            based on the number of days provided. Like

            Step 1: Business Understanding (3 days)
                Day 1: <list of activities to do>
                Day 2: <list of activities to do>
                Day 3: <list of activities to do>

            Step 2: Data Understanding (5 days)
                Day 1: <list of activities to do>
                Day 2: <list of activities to do>
                Day 3: <list of activities to do>
                Day 4: <list of activities to do>
                Day 5: <list of activities to do>

            and so on...
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""## Task 07: Chain-of-Thought (CoT) Pattern

### Zero Shot CoT

üß† **Chain-of-Thought Zero-Shot Prompting** is a clever technique used to improve the reasoning abilities of large language models‚Äîwithout giving them any examples beforehand.

### üöÄ What It Is
- **Zero-Shot Prompting**: Asking a model to perform a task without showing examples.
- **Chain-of-Thought (CoT)**: Encouraging the model to reason step-by-step before answering.
- **Zero-Shot CoT**: Combines both by simply appending a phrase like _‚ÄúLet‚Äôs think step by step‚Äù_ to the prompt. This nudges the model to generate intermediate reasoning steps even without prior examples.

### üß© How It Works
1. **Prompt**: Add ‚ÄúLet‚Äôs think step by step‚Äù to the end of a question.
2. **Model Response**: The model breaks down the problem logically, often improving accuracy.
3. **Answer Extraction**: The final answer is derived from the reasoning chain.

### ‚úÖ When to Use It
- Great for **arithmetic**, **commonsense**, and **symbolic reasoning** tasks.
"""

from IPython.display import display, Markdown

prompt = """Given the following game details,
            How many yards was the shortest valid field goal?
            Think step-by-step to get to your answer.
            Show your step-by-step reasoning and then the answer.

            Coming off their win over the Broncos, the Redskins flew to Cowboys Stadium
            for their Week 11 NFC East rivalry match against the Dallas Cowboys.
            After a scoreless first quarter, Washington would strike in the second quarter
            as kicker Shaun Suisham nailed a 35-yard field goal.
            The Redskins would try to add onto their lead in the third quarter
            with Suisham booting a 31-yard field goal which was blocked.
            However, in the fourth quarter, the Cowboys rallied as quarterback Tony Romo
            completing a 10-yard touchdown pass to wide receiver Patrick Crayton.
         """

response = chatgpt.invoke(prompt)
display(Markdown(response.content))

"""###  Few-Shot CoT

### üß† Few-Shot Chain-of-Thought (CoT) Prompting

Few-Shot CoT Prompting is a technique that combines **few-shot learning** with **step-by-step reasoning** to improve the performance of large language models on complex tasks.


### üìò What It Is
- **Few-Shot Prompting**: You provide the model with a few examples of input-output pairs to guide its behavior.
- **Chain-of-Thought Prompting**: You encourage the model to reason step-by-step before answering.
- **Few-Shot CoT**: You give the model a few examples that include both the question and the detailed reasoning process leading to the answer.



### ‚úÖ Benefits
- Helps the model learn the structure of reasoning.
- Improves accuracy on multi-step problems.
- Reduces hallucinations and shallow answers.


### ‚ö†Ô∏è Limitations

| Limitation | Description |
|-----------|-------------|
| üìö **Example Dependency** | Requires carefully chosen examples; poor examples lead to poor performance. |
| üß† **Cognitive Load** | Long prompts may overwhelm smaller models or exceed token limits. |
| üéØ **Task Specificity** | Works best for structured tasks like math, logic, and factual reasoning. |
| üîÑ **Generalization Risk** | May not generalize well to very different or novel tasks. |
"""

from IPython.display import display, Markdown

prompt = """Given the following game details,
            How many yards was the shortest valid field goal?
            Think step-by-step to get to your answer similar to the following examples:

            Example 1:
            Q: Roger has 5 tennis balls. He buys 2 more cans of tennis balls.
               Each can has 3 tennis balls. How many tennis balls does he have now?

            Reasoning:
              Step 1: Roger started with 5 balls.
              Step 2: 2 cans of 3 tennis balls each is 6 tennis balls in total.
              Step 3: 5 + 6 = 11 tennis balls.

            A: 11 Tennis Balls

            Example 2:
            Q: How many keystrokes are needed to type the numbers from 1 to 500?

            Reasoning:
              Step 1: There are 9 one-digit numbers from 1 to 9.
              Step 2: There are 90 two-digit numbers from 10 to 99.
              Step 3: There are 401 three-digit numbers from 100 to 500.
              Step 4: Adding all of them up, 9 + 90 + 401 = 1392 keystrokes.

            A: 1392 keystrokes


            Q: Coming off their win over the Broncos, the Redskins flew to Cowboys Stadium
            for their Week 11 NFC East rivalry match against the Dallas Cowboys.
            After a scoreless first quarter, Washington would strike in the second quarter
            as kicker Shaun Suisham nailed a 35-yard field goal.
            The Redskins would try to add onto their lead in the third quarter
            with Suisham booting a 31-yard field goal which was blocked.
            However, in the fourth quarter, the Cowboys rallied as quarterback Tony Romo
            completing a 10-yard touchdown pass to wide receiver Patrick Crayton.
         """

response = chatgpt.invoke(prompt)
print(response.content)

"""## Task 08: Self-Consistency Pattern

### üîÅ Self-Consistency Pattern Prompting

**Self-Consistency Prompting** is a powerful technique in prompt engineering that enhances the reasoning accuracy of large language models (LLMs) by generating multiple outputs and selecting the most consistent answer among them.

### üß† Core Idea

Instead of relying on a single response, the model:
1. **Generates multiple reasoning paths** for the same prompt.
2. **Aggregates the results** to identify the most frequently occurring or logically consistent answer.
3. **Selects the final output** based on consensus or majority vote.

This method was introduced by Google researchers in 2023 and is especially effective for tasks involving arithmetic, commonsense reasoning, and symbolic logic.


### üõ†Ô∏è How to Use It

1. **Start with Chain-of-Thought (CoT) Prompting**: Provide step-by-step reasoning examples.
2. **Sample Diverse Outputs**: Run the same prompt multiple times to get varied reasoning paths.
3. **Aggregate Responses**: Use majority voting or consistency checks to select the final answer.

### ‚úÖ Benefits

| Feature | Advantage |
|--------|-----------|
| üîç Multiple Reasoning Paths | Reduces reliance on a single flawed logic chain |
| üìä Aggregation | Improves reliability and accuracy |
| üß© Versatility | Works well for math, logic, and commonsense tasks |

### ‚ö†Ô∏è Considerations

- Requires multiple model runs, which can be computationally expensive.
- Best suited for tasks with **objective answers**.
- May not be ideal for open-ended or creative tasks unless adapted (e.g., Universal Self-Consistency).
"""

from langchain_core.prompts import ChatPromptTemplate

cot_prompt_txt = """Given the following problem,
                    Think step-by-step to get to your answer similar to the following example:

                    Example 1:
                    Q: Roger has 5 tennis balls. He buys 2 more cans of tennis balls.
                    Each can has 3 tennis balls. How many tennis balls does he have now?

                    Reasoning:
                    Step 1: Roger started with 5 balls.
                    Step 2: 2 cans of 3 tennis balls each is 6 tennis balls in total.
                    Step 3: 5 + 6 = 11 tennis balls.

                    A: 11 Tennis Balls

                    Problem:
                    {problem}
                """

cot_prompt = ChatPromptTemplate.from_template(cot_prompt_txt)
cot_prompt.pretty_print()

self_con_prompt_txt = """Given the following problem
                         and 3 diverse reasoning paths explored by an AI model
                         analyse these pathways carefully,
                         aggregate, take the majority vote as needed
                         and generate a final single reasoning path along with the answer

                         AI Model Reasoning Path 1:
                         {reasoning_path_1}

                         AI Model Reasoning Path 2:
                         {reasoning_path_2}

                         AI Model Reasoning Path 3:
                         {reasoning_path_3}

                         Problem:
                         {problem}
                    """

self_con_prompt = ChatPromptTemplate.from_template(self_con_prompt_txt)
self_con_prompt.pretty_print()

# do CoT exploration independently 3 times with these models
gpt1 = ChatOpenAI(model_name='gpt-4o-mini', temperature=0)
gpt2 = ChatOpenAI(model_name='gpt-4o-mini', temperature=0.5)
gpt3 = ChatOpenAI(model_name='gpt-4o-mini', temperature=0.9)

# do final reasoning and aggregation with this model
chatgpt = ChatOpenAI(model_name='gpt-4o-mini', temperature=0)

from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnableParallel, RunnablePassthrough

# independent CoT explorations with 3 different LLMs (with different temp settings)
llm_chain1 = cot_prompt | gpt1 | StrOutputParser()
llm_chain2 = cot_prompt | gpt2 | StrOutputParser()
llm_chain3 = cot_prompt | gpt3 | StrOutputParser()

sc_chain = (
                RunnableParallel(problem=RunnablePassthrough(),
                                 reasoning_path_1=llm_chain1,
                                 reasoning_path_2=llm_chain2,
                                 reasoning_path_3=llm_chain3)
                        |
                self_con_prompt
                        |
                    chatgpt
            )

question = """Q: Coming off their win over the Broncos, the Redskins flew to Cowboys Stadium
            for their Week 11 NFC East rivalry match against the Dallas Cowboys.
            After a scoreless first quarter, Washington would strike in the second quarter
            as kicker Shaun Suisham nailed a 35-yard field goal.
            The Redskins would try to add onto their lead in the third quarter
            with Suisham booting a 31-yard field goal which was blocked.
            However, in the fourth quarter, the Cowboys rallied as quarterback Tony Romo
            completing a 10-yard touchdown pass to wide receiver Patrick Crayton.
            How many yards was the shortest valid field goal?
           """

response = sc_chain.invoke({'problem': question})
display(Markdown(response.content))

"""## Task 09: Least to Most Prompting

### üß© Least-to-Most Prompting (LtM)

**Least-to-Most Prompting** is a structured prompt engineering technique designed to help large language models solve complex problems by breaking them down into simpler, sequential subproblems. It builds on the principles of **Chain-of-Thought (CoT)** prompting but adds a more systematic decomposition and reasoning flow.

### üß† Core Concept

Instead of solving a complex problem all at once, LtM prompting:
1. **Decomposes** the problem into a series of simpler subproblems.
2. **Solves each subproblem sequentially**, feeding the solution of one into the next.
3. **Builds up to the final answer**, using minimal guidance at first and increasing support only as needed.

This mirrors how humans often learn: starting with basic steps and gradually tackling more difficult ones.

### ‚úÖ Benefits

| Feature | Advantage |
|--------|-----------|
| üß† Structured Reasoning | Breaks down complexity into manageable steps |
| üìà Improved Accuracy | Outperforms CoT on harder tasks |
| üîÑ Reusability | Can be adapted to various domains (math, logic, customer service) |
| üß™ Few-Shot Compatible | Works well with few-shot examples to guide decomposition |

### üî¨ Research Insights

- LtM prompting has shown **99% accuracy** on compositional generalization benchmarks like SCAN, compared to **16%** with CoT.
- It‚Äôs especially effective for **symbolic manipulation**, **multi-step math**, and **logical reasoning**.
task‚Äîlike math problems, customer queries, or even creative writing?
"""

PROMPT = """You are a strong reasoning agent.
            Respond to user question with concise and helpful information.
            Follow the format as mentioned in the example,
            break down the problem first into sub problems,
            answer each sub problem sequentially, analyze it
            and then get to the final answer.
            Do not jump directly to the answer

            Example:

            Q: Against Tim Tebow and the Broncos, the two teams would be in a 0-0 deadlock
            in the first half, though the Broncos would nearly score in the second quarter
            on a 28-yard field goal, which would then be blocked by Julius Peppers.
            The Bears would then score 10 points on Marion Barber's 9-yard touchdown run,
            and Robbie Gould's team record-breaking 57-yard field goal, but Tebow's touchdown pass
            to Demaryius Thomas and Matt Prater's 59-yard field goal would tie the game.
            Barber would commit two costly mistakes during the late portion of the game.
            In the fourth quarter, Barber would run out of bounds with 1:55 left,
            and Barber would also fumble in overtime.
            The Broncos would then move downfield and kick a game-winning field goal.
            How many yards was the games longest field goal?

            Response:
            Let's break down this problem into subproblems:
              1. What were the field goals when field goal was?
              2. How many yards was the games longest field goal?

            The answer to subproblems are as follows:
              1. The field goals were 28-yard,  57-yard and  59-yard which are all valid goals
              2. The maximum value out of  59-yard, 28-yard and 57-yard is 59

            A: The final answer is 59 yards.

            Question:
            {query}
        """

query = """Coming off their win over the Broncos, the Redskins flew to Cowboys Stadium
           for their Week 11 NFC East rivalry match against the Dallas Cowboys.
           After a scoreless first quarter, Washington would strike in the second quarter
           as kicker Shaun Suisham nailed a 35-yard field goal.
           The Redskins would try to add onto their lead in the third quarter
           with Suisham booting a 31-yard field goal which was blocked.
           However, in the fourth quarter, the Cowboys rallied as quarterback Tony Romo
           completing a 10-yard touchdown pass to wide receiver Patrick Crayton.
           How many yards was the shortest valid field goal?
        """

prompt = ChatPromptTemplate.from_template(PROMPT)

chain = (prompt
           |
         chatgpt
)

response = chain.invoke({"query": query})
print(response.content)